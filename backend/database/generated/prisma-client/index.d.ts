// Code generated by Prisma (prisma@1.19.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  contractor: (where?: ContractorWhereInput) => Promise<boolean>;
  dataShareConsent: (where?: DataShareConsentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contractor: (where: ContractorWhereUniqueInput) => Contractor;
  contractors: (
    args?: {
      where?: ContractorWhereInput;
      orderBy?: ContractorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ContractorNode>;
  contractorsConnection: (
    args?: {
      where?: ContractorWhereInput;
      orderBy?: ContractorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ContractorConnection;
  dataShareConsent: (
    where: DataShareConsentWhereUniqueInput
  ) => DataShareConsent;
  dataShareConsents: (
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DataShareConsentNode>;
  dataShareConsentsConnection: (
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DataShareConsentConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContractor: (data: ContractorCreateInput) => Contractor;
  updateContractor: (
    args: { data: ContractorUpdateInput; where: ContractorWhereUniqueInput }
  ) => Contractor;
  updateManyContractors: (
    args: { data: ContractorUpdateInput; where?: ContractorWhereInput }
  ) => BatchPayload;
  upsertContractor: (
    args: {
      where: ContractorWhereUniqueInput;
      create: ContractorCreateInput;
      update: ContractorUpdateInput;
    }
  ) => Contractor;
  deleteContractor: (where: ContractorWhereUniqueInput) => Contractor;
  deleteManyContractors: (where?: ContractorWhereInput) => BatchPayload;
  createDataShareConsent: (
    data: DataShareConsentCreateInput
  ) => DataShareConsent;
  updateDataShareConsent: (
    args: {
      data: DataShareConsentUpdateInput;
      where: DataShareConsentWhereUniqueInput;
    }
  ) => DataShareConsent;
  updateManyDataShareConsents: (
    args: {
      data: DataShareConsentUpdateInput;
      where?: DataShareConsentWhereInput;
    }
  ) => BatchPayload;
  upsertDataShareConsent: (
    args: {
      where: DataShareConsentWhereUniqueInput;
      create: DataShareConsentCreateInput;
      update: DataShareConsentUpdateInput;
    }
  ) => DataShareConsent;
  deleteDataShareConsent: (
    where: DataShareConsentWhereUniqueInput
  ) => DataShareConsent;
  deleteManyDataShareConsents: (
    where?: DataShareConsentWhereInput
  ) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contractor: (
    where?: ContractorSubscriptionWhereInput
  ) => ContractorSubscriptionPayloadSubscription;
  dataShareConsent: (
    where?: DataShareConsentSubscriptionWhereInput
  ) => DataShareConsentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserType = "ADMIN" | "USER" | "TEMPUSER" | "NEW";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContractorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "symbol_ASC"
  | "symbol_DESC"
  | "street_ASC"
  | "street_DESC"
  | "city_ASC"
  | "city_DESC"
  | "postal_ASC"
  | "postal_DESC"
  | "country_ASC"
  | "country_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DataShareConsentOrderByInput =
  | "consentDate_ASC"
  | "consentDate_DESC"
  | "consentGivenTo_ASC"
  | "consentGivenTo_DESC"
  | "collectionName_ASC"
  | "collectionName_DESC"
  | "legalBasis_ASC"
  | "legalBasis_DESC"
  | "rangeOfConsentedData_ASC"
  | "rangeOfConsentedData_DESC"
  | "consentGivenBy_ASC"
  | "consentGivenBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContractorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  role?: UserType;
  role_not?: UserType;
  role_in?: UserType[] | UserType;
  role_not_in?: UserType[] | UserType;
  contractor_every?: ContractorWhereInput;
  contractor_some?: ContractorWhereInput;
  contractor_none?: ContractorWhereInput;
  createdBy_every?: DataShareConsentWhereInput;
  createdBy_some?: DataShareConsentWhereInput;
  createdBy_none?: DataShareConsentWhereInput;
  updatedBy_every?: DataShareConsentWhereInput;
  updatedBy_some?: DataShareConsentWhereInput;
  updatedBy_none?: DataShareConsentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ContractorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  symbol?: String;
  symbol_not?: String;
  symbol_in?: String[] | String;
  symbol_not_in?: String[] | String;
  symbol_lt?: String;
  symbol_lte?: String;
  symbol_gt?: String;
  symbol_gte?: String;
  symbol_contains?: String;
  symbol_not_contains?: String;
  symbol_starts_with?: String;
  symbol_not_starts_with?: String;
  symbol_ends_with?: String;
  symbol_not_ends_with?: String;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  postal?: String;
  postal_not?: String;
  postal_in?: String[] | String;
  postal_not_in?: String[] | String;
  postal_lt?: String;
  postal_lte?: String;
  postal_gt?: String;
  postal_gte?: String;
  postal_contains?: String;
  postal_not_contains?: String;
  postal_starts_with?: String;
  postal_not_starts_with?: String;
  postal_ends_with?: String;
  postal_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  user_every?: UserWhereInput;
  user_some?: UserWhereInput;
  user_none?: UserWhereInput;
  AND?: ContractorWhereInput[] | ContractorWhereInput;
  OR?: ContractorWhereInput[] | ContractorWhereInput;
  NOT?: ContractorWhereInput[] | ContractorWhereInput;
}

export interface DataShareConsentWhereInput {
  consentDate?: DateTimeInput;
  consentDate_not?: DateTimeInput;
  consentDate_in?: DateTimeInput[] | DateTimeInput;
  consentDate_not_in?: DateTimeInput[] | DateTimeInput;
  consentDate_lt?: DateTimeInput;
  consentDate_lte?: DateTimeInput;
  consentDate_gt?: DateTimeInput;
  consentDate_gte?: DateTimeInput;
  consentGivenTo?: String;
  consentGivenTo_not?: String;
  consentGivenTo_in?: String[] | String;
  consentGivenTo_not_in?: String[] | String;
  consentGivenTo_lt?: String;
  consentGivenTo_lte?: String;
  consentGivenTo_gt?: String;
  consentGivenTo_gte?: String;
  consentGivenTo_contains?: String;
  consentGivenTo_not_contains?: String;
  consentGivenTo_starts_with?: String;
  consentGivenTo_not_starts_with?: String;
  consentGivenTo_ends_with?: String;
  consentGivenTo_not_ends_with?: String;
  collectionName?: String;
  collectionName_not?: String;
  collectionName_in?: String[] | String;
  collectionName_not_in?: String[] | String;
  collectionName_lt?: String;
  collectionName_lte?: String;
  collectionName_gt?: String;
  collectionName_gte?: String;
  collectionName_contains?: String;
  collectionName_not_contains?: String;
  collectionName_starts_with?: String;
  collectionName_not_starts_with?: String;
  collectionName_ends_with?: String;
  collectionName_not_ends_with?: String;
  legalBasis?: String;
  legalBasis_not?: String;
  legalBasis_in?: String[] | String;
  legalBasis_not_in?: String[] | String;
  legalBasis_lt?: String;
  legalBasis_lte?: String;
  legalBasis_gt?: String;
  legalBasis_gte?: String;
  legalBasis_contains?: String;
  legalBasis_not_contains?: String;
  legalBasis_starts_with?: String;
  legalBasis_not_starts_with?: String;
  legalBasis_ends_with?: String;
  legalBasis_not_ends_with?: String;
  rangeOfConsentedData?: String;
  rangeOfConsentedData_not?: String;
  rangeOfConsentedData_in?: String[] | String;
  rangeOfConsentedData_not_in?: String[] | String;
  rangeOfConsentedData_lt?: String;
  rangeOfConsentedData_lte?: String;
  rangeOfConsentedData_gt?: String;
  rangeOfConsentedData_gte?: String;
  rangeOfConsentedData_contains?: String;
  rangeOfConsentedData_not_contains?: String;
  rangeOfConsentedData_starts_with?: String;
  rangeOfConsentedData_not_starts_with?: String;
  rangeOfConsentedData_ends_with?: String;
  rangeOfConsentedData_not_ends_with?: String;
  consentGivenBy?: String;
  consentGivenBy_not?: String;
  consentGivenBy_in?: String[] | String;
  consentGivenBy_not_in?: String[] | String;
  consentGivenBy_lt?: String;
  consentGivenBy_lte?: String;
  consentGivenBy_gt?: String;
  consentGivenBy_gte?: String;
  consentGivenBy_contains?: String;
  consentGivenBy_not_contains?: String;
  consentGivenBy_starts_with?: String;
  consentGivenBy_not_starts_with?: String;
  consentGivenBy_ends_with?: String;
  consentGivenBy_not_ends_with?: String;
  createdBy?: UserWhereInput;
  updatedBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: DataShareConsentWhereInput[] | DataShareConsentWhereInput;
  OR?: DataShareConsentWhereInput[] | DataShareConsentWhereInput;
  NOT?: DataShareConsentWhereInput[] | DataShareConsentWhereInput;
}

export type DataShareConsentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ContractorCreateInput {
  name: String;
  symbol: String;
  street: String;
  city: String;
  postal: String;
  country: String;
  user?: UserCreateManyWithoutContractorInput;
}

export interface UserCreateManyWithoutContractorInput {
  create?:
    | UserCreateWithoutContractorInput[]
    | UserCreateWithoutContractorInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutContractorInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role?: UserType;
  createdBy?: DataShareConsentCreateManyWithoutCreatedByInput;
  updatedBy?: DataShareConsentCreateManyWithoutUpdatedByInput;
}

export interface DataShareConsentCreateManyWithoutCreatedByInput {
  create?:
    | DataShareConsentCreateWithoutCreatedByInput[]
    | DataShareConsentCreateWithoutCreatedByInput;
  connect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
}

export interface DataShareConsentCreateWithoutCreatedByInput {
  consentDate: DateTimeInput;
  consentGivenTo: String;
  collectionName: String;
  legalBasis: String;
  rangeOfConsentedData: String;
  consentGivenBy: String;
  updatedBy: UserCreateOneWithoutUpdatedByInput;
}

export interface UserCreateOneWithoutUpdatedByInput {
  create?: UserCreateWithoutUpdatedByInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutUpdatedByInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorCreateManyWithoutUserInput;
  createdBy?: DataShareConsentCreateManyWithoutCreatedByInput;
}

export interface ContractorCreateManyWithoutUserInput {
  create?:
    | ContractorCreateWithoutUserInput[]
    | ContractorCreateWithoutUserInput;
  connect?: ContractorWhereUniqueInput[] | ContractorWhereUniqueInput;
}

export interface ContractorCreateWithoutUserInput {
  name: String;
  symbol: String;
  street: String;
  city: String;
  postal: String;
  country: String;
}

export interface DataShareConsentCreateManyWithoutUpdatedByInput {
  create?:
    | DataShareConsentCreateWithoutUpdatedByInput[]
    | DataShareConsentCreateWithoutUpdatedByInput;
  connect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
}

export interface DataShareConsentCreateWithoutUpdatedByInput {
  consentDate: DateTimeInput;
  consentGivenTo: String;
  collectionName: String;
  legalBasis: String;
  rangeOfConsentedData: String;
  consentGivenBy: String;
  createdBy: UserCreateOneWithoutCreatedByInput;
}

export interface UserCreateOneWithoutCreatedByInput {
  create?: UserCreateWithoutCreatedByInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCreatedByInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorCreateManyWithoutUserInput;
  updatedBy?: DataShareConsentCreateManyWithoutUpdatedByInput;
}

export interface ContractorUpdateInput {
  name?: String;
  symbol?: String;
  street?: String;
  city?: String;
  postal?: String;
  country?: String;
  user?: UserUpdateManyWithoutContractorInput;
}

export interface UserUpdateManyWithoutContractorInput {
  create?:
    | UserCreateWithoutContractorInput[]
    | UserCreateWithoutContractorInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutContractorInput[]
    | UserUpdateWithWhereUniqueWithoutContractorInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutContractorInput[]
    | UserUpsertWithWhereUniqueWithoutContractorInput;
}

export interface UserUpdateWithWhereUniqueWithoutContractorInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutContractorDataInput;
}

export interface UserUpdateWithoutContractorDataInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  role?: UserType;
  createdBy?: DataShareConsentUpdateManyWithoutCreatedByInput;
  updatedBy?: DataShareConsentUpdateManyWithoutUpdatedByInput;
}

export interface DataShareConsentUpdateManyWithoutCreatedByInput {
  create?:
    | DataShareConsentCreateWithoutCreatedByInput[]
    | DataShareConsentCreateWithoutCreatedByInput;
  delete?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  connect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  disconnect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  update?:
    | DataShareConsentUpdateWithWhereUniqueWithoutCreatedByInput[]
    | DataShareConsentUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | DataShareConsentUpsertWithWhereUniqueWithoutCreatedByInput[]
    | DataShareConsentUpsertWithWhereUniqueWithoutCreatedByInput;
}

export interface DataShareConsentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: DataShareConsentWhereUniqueInput;
  data: DataShareConsentUpdateWithoutCreatedByDataInput;
}

export interface DataShareConsentUpdateWithoutCreatedByDataInput {
  consentDate?: DateTimeInput;
  consentGivenTo?: String;
  collectionName?: String;
  legalBasis?: String;
  rangeOfConsentedData?: String;
  consentGivenBy?: String;
  updatedBy?: UserUpdateOneRequiredWithoutUpdatedByInput;
}

export interface UserUpdateOneRequiredWithoutUpdatedByInput {
  create?: UserCreateWithoutUpdatedByInput;
  update?: UserUpdateWithoutUpdatedByDataInput;
  upsert?: UserUpsertWithoutUpdatedByInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutUpdatedByDataInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorUpdateManyWithoutUserInput;
  createdBy?: DataShareConsentUpdateManyWithoutCreatedByInput;
}

export interface ContractorUpdateManyWithoutUserInput {
  create?:
    | ContractorCreateWithoutUserInput[]
    | ContractorCreateWithoutUserInput;
  delete?: ContractorWhereUniqueInput[] | ContractorWhereUniqueInput;
  connect?: ContractorWhereUniqueInput[] | ContractorWhereUniqueInput;
  disconnect?: ContractorWhereUniqueInput[] | ContractorWhereUniqueInput;
  update?:
    | ContractorUpdateWithWhereUniqueWithoutUserInput[]
    | ContractorUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ContractorUpsertWithWhereUniqueWithoutUserInput[]
    | ContractorUpsertWithWhereUniqueWithoutUserInput;
}

export interface ContractorUpdateWithWhereUniqueWithoutUserInput {
  where: ContractorWhereUniqueInput;
  data: ContractorUpdateWithoutUserDataInput;
}

export interface ContractorUpdateWithoutUserDataInput {
  name?: String;
  symbol?: String;
  street?: String;
  city?: String;
  postal?: String;
  country?: String;
}

export interface ContractorUpsertWithWhereUniqueWithoutUserInput {
  where: ContractorWhereUniqueInput;
  update: ContractorUpdateWithoutUserDataInput;
  create: ContractorCreateWithoutUserInput;
}

export interface UserUpsertWithoutUpdatedByInput {
  update: UserUpdateWithoutUpdatedByDataInput;
  create: UserCreateWithoutUpdatedByInput;
}

export interface DataShareConsentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: DataShareConsentWhereUniqueInput;
  update: DataShareConsentUpdateWithoutCreatedByDataInput;
  create: DataShareConsentCreateWithoutCreatedByInput;
}

export interface DataShareConsentUpdateManyWithoutUpdatedByInput {
  create?:
    | DataShareConsentCreateWithoutUpdatedByInput[]
    | DataShareConsentCreateWithoutUpdatedByInput;
  delete?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  connect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  disconnect?:
    | DataShareConsentWhereUniqueInput[]
    | DataShareConsentWhereUniqueInput;
  update?:
    | DataShareConsentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    | DataShareConsentUpdateWithWhereUniqueWithoutUpdatedByInput;
  upsert?:
    | DataShareConsentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    | DataShareConsentUpsertWithWhereUniqueWithoutUpdatedByInput;
}

export interface DataShareConsentUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: DataShareConsentWhereUniqueInput;
  data: DataShareConsentUpdateWithoutUpdatedByDataInput;
}

export interface DataShareConsentUpdateWithoutUpdatedByDataInput {
  consentDate?: DateTimeInput;
  consentGivenTo?: String;
  collectionName?: String;
  legalBasis?: String;
  rangeOfConsentedData?: String;
  consentGivenBy?: String;
  createdBy?: UserUpdateOneRequiredWithoutCreatedByInput;
}

export interface UserUpdateOneRequiredWithoutCreatedByInput {
  create?: UserCreateWithoutCreatedByInput;
  update?: UserUpdateWithoutCreatedByDataInput;
  upsert?: UserUpsertWithoutCreatedByInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCreatedByDataInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorUpdateManyWithoutUserInput;
  updatedBy?: DataShareConsentUpdateManyWithoutUpdatedByInput;
}

export interface UserUpsertWithoutCreatedByInput {
  update: UserUpdateWithoutCreatedByDataInput;
  create: UserCreateWithoutCreatedByInput;
}

export interface DataShareConsentUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: DataShareConsentWhereUniqueInput;
  update: DataShareConsentUpdateWithoutUpdatedByDataInput;
  create: DataShareConsentCreateWithoutUpdatedByInput;
}

export interface UserUpsertWithWhereUniqueWithoutContractorInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutContractorDataInput;
  create: UserCreateWithoutContractorInput;
}

export interface DataShareConsentCreateInput {
  consentDate: DateTimeInput;
  consentGivenTo: String;
  collectionName: String;
  legalBasis: String;
  rangeOfConsentedData: String;
  consentGivenBy: String;
  createdBy: UserCreateOneWithoutCreatedByInput;
  updatedBy: UserCreateOneWithoutUpdatedByInput;
}

export interface DataShareConsentUpdateInput {
  consentDate?: DateTimeInput;
  consentGivenTo?: String;
  collectionName?: String;
  legalBasis?: String;
  rangeOfConsentedData?: String;
  consentGivenBy?: String;
  createdBy?: UserUpdateOneRequiredWithoutCreatedByInput;
  updatedBy?: UserUpdateOneRequiredWithoutUpdatedByInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorCreateManyWithoutUserInput;
  createdBy?: DataShareConsentCreateManyWithoutCreatedByInput;
  updatedBy?: DataShareConsentCreateManyWithoutUpdatedByInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  role?: UserType;
  contractor?: ContractorUpdateManyWithoutUserInput;
  createdBy?: DataShareConsentUpdateManyWithoutCreatedByInput;
  updatedBy?: DataShareConsentUpdateManyWithoutUpdatedByInput;
}

export interface ContractorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ContractorWhereInput;
  AND?: ContractorSubscriptionWhereInput[] | ContractorSubscriptionWhereInput;
  OR?: ContractorSubscriptionWhereInput[] | ContractorSubscriptionWhereInput;
  NOT?: ContractorSubscriptionWhereInput[] | ContractorSubscriptionWhereInput;
}

export interface DataShareConsentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DataShareConsentWhereInput;
  AND?:
    | DataShareConsentSubscriptionWhereInput[]
    | DataShareConsentSubscriptionWhereInput;
  OR?:
    | DataShareConsentSubscriptionWhereInput[]
    | DataShareConsentSubscriptionWhereInput;
  NOT?:
    | DataShareConsentSubscriptionWhereInput[]
    | DataShareConsentSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ContractorNode {
  id: ID_Output;
  name: String;
  symbol: String;
  street: String;
  city: String;
  postal: String;
  country: String;
}

export interface Contractor extends Promise<ContractorNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  symbol: () => Promise<String>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  postal: () => Promise<String>;
  country: () => Promise<String>;
  user: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ContractorSubscription
  extends Promise<AsyncIterator<ContractorNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  symbol: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postal: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  user: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role: UserType;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  role: () => Promise<UserType>;
  contractor: <T = FragmentableArray<ContractorNode>>(
    args?: {
      where?: ContractorWhereInput;
      orderBy?: ContractorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = FragmentableArray<DataShareConsentNode>>(
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  updatedBy: <T = FragmentableArray<DataShareConsentNode>>(
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserType>>;
  contractor: <T = Promise<AsyncIterator<ContractorSubscription>>>(
    args?: {
      where?: ContractorWhereInput;
      orderBy?: ContractorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = Promise<AsyncIterator<DataShareConsentSubscription>>>(
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  updatedBy: <T = Promise<AsyncIterator<DataShareConsentSubscription>>>(
    args?: {
      where?: DataShareConsentWhereInput;
      orderBy?: DataShareConsentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DataShareConsentNode {
  consentDate: DateTimeOutput;
  consentGivenTo: String;
  collectionName: String;
  legalBasis: String;
  rangeOfConsentedData: String;
  consentGivenBy: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: ID_Output;
}

export interface DataShareConsent
  extends Promise<DataShareConsentNode>,
    Fragmentable {
  consentDate: () => Promise<DateTimeOutput>;
  consentGivenTo: () => Promise<String>;
  collectionName: () => Promise<String>;
  legalBasis: () => Promise<String>;
  rangeOfConsentedData: () => Promise<String>;
  consentGivenBy: () => Promise<String>;
  createdBy: <T = User>() => T;
  updatedBy: <T = User>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
}

export interface DataShareConsentSubscription
  extends Promise<AsyncIterator<DataShareConsentNode>>,
    Fragmentable {
  consentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  consentGivenTo: () => Promise<AsyncIterator<String>>;
  collectionName: () => Promise<AsyncIterator<String>>;
  legalBasis: () => Promise<AsyncIterator<String>>;
  rangeOfConsentedData: () => Promise<AsyncIterator<String>>;
  consentGivenBy: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  updatedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ContractorConnectionNode {}

export interface ContractorConnection
  extends Promise<ContractorConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ContractorEdgeNode>>() => T;
  aggregate: <T = AggregateContractor>() => T;
}

export interface ContractorConnectionSubscription
  extends Promise<AsyncIterator<ContractorConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContractorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContractorSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContractorEdgeNode {
  cursor: String;
}

export interface ContractorEdge
  extends Promise<ContractorEdgeNode>,
    Fragmentable {
  node: <T = Contractor>() => T;
  cursor: () => Promise<String>;
}

export interface ContractorEdgeSubscription
  extends Promise<AsyncIterator<ContractorEdgeNode>>,
    Fragmentable {
  node: <T = ContractorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContractorNode {
  count: Int;
}

export interface AggregateContractor
  extends Promise<AggregateContractorNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContractorSubscription
  extends Promise<AsyncIterator<AggregateContractorNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DataShareConsentConnectionNode {}

export interface DataShareConsentConnection
  extends Promise<DataShareConsentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<DataShareConsentEdgeNode>>() => T;
  aggregate: <T = AggregateDataShareConsent>() => T;
}

export interface DataShareConsentConnectionSubscription
  extends Promise<AsyncIterator<DataShareConsentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DataShareConsentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDataShareConsentSubscription>() => T;
}

export interface DataShareConsentEdgeNode {
  cursor: String;
}

export interface DataShareConsentEdge
  extends Promise<DataShareConsentEdgeNode>,
    Fragmentable {
  node: <T = DataShareConsent>() => T;
  cursor: () => Promise<String>;
}

export interface DataShareConsentEdgeSubscription
  extends Promise<AsyncIterator<DataShareConsentEdgeNode>>,
    Fragmentable {
  node: <T = DataShareConsentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDataShareConsentNode {
  count: Int;
}

export interface AggregateDataShareConsent
  extends Promise<AggregateDataShareConsentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDataShareConsentSubscription
  extends Promise<AsyncIterator<AggregateDataShareConsentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContractorSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ContractorSubscriptionPayload
  extends Promise<ContractorSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Contractor>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContractorPreviousValues>() => T;
}

export interface ContractorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContractorSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContractorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContractorPreviousValuesSubscription>() => T;
}

export interface ContractorPreviousValuesNode {
  id: ID_Output;
  name: String;
  symbol: String;
  street: String;
  city: String;
  postal: String;
  country: String;
}

export interface ContractorPreviousValues
  extends Promise<ContractorPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  symbol: () => Promise<String>;
  street: () => Promise<String>;
  city: () => Promise<String>;
  postal: () => Promise<String>;
  country: () => Promise<String>;
}

export interface ContractorPreviousValuesSubscription
  extends Promise<AsyncIterator<ContractorPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  symbol: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postal: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface DataShareConsentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DataShareConsentSubscriptionPayload
  extends Promise<DataShareConsentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DataShareConsent>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DataShareConsentPreviousValues>() => T;
}

export interface DataShareConsentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DataShareConsentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DataShareConsentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DataShareConsentPreviousValuesSubscription>() => T;
}

export interface DataShareConsentPreviousValuesNode {
  consentDate: DateTimeOutput;
  consentGivenTo: String;
  collectionName: String;
  legalBasis: String;
  rangeOfConsentedData: String;
  consentGivenBy: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  id: ID_Output;
}

export interface DataShareConsentPreviousValues
  extends Promise<DataShareConsentPreviousValuesNode>,
    Fragmentable {
  consentDate: () => Promise<DateTimeOutput>;
  consentGivenTo: () => Promise<String>;
  collectionName: () => Promise<String>;
  legalBasis: () => Promise<String>;
  rangeOfConsentedData: () => Promise<String>;
  consentGivenBy: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
}

export interface DataShareConsentPreviousValuesSubscription
  extends Promise<AsyncIterator<DataShareConsentPreviousValuesNode>>,
    Fragmentable {
  consentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  consentGivenTo: () => Promise<AsyncIterator<String>>;
  collectionName: () => Promise<AsyncIterator<String>>;
  legalBasis: () => Promise<AsyncIterator<String>>;
  rangeOfConsentedData: () => Promise<AsyncIterator<String>>;
  consentGivenBy: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  avatar?: String;
  role: UserType;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  role: () => Promise<UserType>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserType>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
